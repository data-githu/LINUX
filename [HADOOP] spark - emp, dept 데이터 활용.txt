■ spark - emp, dept 데이터 활용
(스칼라 접속창) scalar>  sql("select * from emp").count()
# 14건인지 확인 

(스칼라 접속창) scalar>  sql("select * from dept").count()
# 4건인지 확인 


문제257.  스칼라에서 부서번호가 30번인 사원들의 모든 데이터를 출력하시오 !
scala> sql("select  *  from  emp  where  deptno=30").show()

문제258.  위에서 출력된 결과의 건수가 어떻게 되는지 확인하시오 !
scala> sql("select  *  from  emp  where  deptno=30").count()

문제259. 직업이 SALESMAN 인 사원들의 이름과 직업과 월급을 출력하시오!
scala > sql("select ename, job, sal from emp where job='SALESMAN'").show()

설명 : 스칼라는 in memory db 여서 hive 보다 속도가 빠릅니다.

문제260. 부서테이블 전체를 출력하시오!
scala >  sql("select * from dept").show()

문제261. 이름과 부서위치를 출력하시오!(조인확인)
scala > sql("select e.ename, d.loc from emp e join dept d on (e.deptno = d.deptno)").show()

문제262. DALLAS 에서 근무하는 사원들의 이름과 부서위치를 출력하시오!
scala > sql("select e.ename, d.loc from emp e join dept d on(e.deptno = d.deptno) where d.loc = 'DALLAS'").show()

문제263. 아우터 조인도 가능한지 확인하시오! 
SQL > select e.ename, d.loc
	from emp e right outer join dept d
	on (e.deptno = d.deptno);
	
scala > sql("""select e.ename, d.loc
	from emp e right outer join dept d
	on (e.deptno = d.deptno)""").show()

문제264. JONES 보다 더 많은 월급을 받는 사원들의 이름과 월급을 출력하시오!
scala> sql("""select ename, sal
		from emp
		where sal > (select sal from emp where ename='JONES')""").show()

문제265. ALLEN 보다 늦게 입사한 사원들의 이름과 입사일을 출력하시오!
scala> sql("""select ename, hiredate
		from emp
		where hiredate > (select hiredate from emp where ename='ALLEN')""").show()
		
문제266. 이름, 월급, 월급에 대한 순위를 출력하시오!
scala> sql("""select ename, sal, dense_rank() over (order by sal desc)
		from emp""").show()
		
문제267. 직업, 직업별 토탈월급을 출력하시오!
scala> sql("""select job, sum(sal)
		from emp
		group by job""").show()

문제268. 위의 결과중에 숫자로 나오는 값에 대한 통계값을 출력하시오!
scala> sql("""select job, sum(sal)
		from emp
		group by job""").describe().show()

설명 : decribe() -> 숫자형 칼럼에 대해 기초 통계값 제공(건수, 평균값, 표준편차, 최솟값, 최댓값)

문제269. 사원 테이블을 출력하는데 맨 위에 한 행만 출력하시오.
scala> sql("""select * from emp""").head()



데이터 분석을 위한 큰그림에서의 하둡과 스칼라의 역할은?

	1. 빅데이터를 저장하기 위한 테이블 생성
	2. 테이블에서 데이터를 전처리하고 필요한 데이터 검색
	3. 검색한 데이터를 csv 파일로 거장해서 파이썬, R로 보낸다.
	4. 파이썬이나 R에서 가져온 csv 로 데이터 시각화

문제270. 위에서 출력한 직업과 직업별 토탈월급의 결과를 csv 파일로 저장하시오.
scala> sql("select job, sum(sal) 
from emp 
group by job").coalesce(1).write.option("header","true").option("sep",",").mode("overwrite").csv("/home/scott/dd")

설명 : .write.option("header","true") -> 컬럼명이 나오게 하시오.
	.option("sep",",") -> csv 파일 형태로 만드시오.
	.mode("overwrite").csv("/home/scott/dd") : /home/scott/dd 라는 폴더안에 생성해라.

아래의 결과를 복사해서 윈도우에서 notepad 를 열고 붙여넣은 다음 job.csv로 저장합니다. 저장할 때 파일형식은 모든 파일로 선택해야 합니다.
저장위치는 c 드라이브 밑에 data 밑에 저장합니다.
job,sum(sal)
ANALYST,6000
SALESMAN,5600
CLERK,4150
MANAGER,8275
PRESIDENT,5000

윈도우에서 spyder를 열고 아래의 내용을 코딩하세요.

import pandas as pd
emp = pd.read_csv("c:\\data\\job.csv")
print(emp.columns)

문제271. job.csv 의 내용을 막대그래프로 시각화 하시오!
import pandas as pd

emp = pd.read_csv("c:\\data\\job.csv")
result=emp['sum(sal)']
result.index=emp['job']
result.plot(kind='bar',color='red')

문제272. 스칼라를 이용해서 데이터 전처리 및 검색을 하고 파이썬에서 시각화하는 큰그림을 구현하시오! 부서번호, 부서번호별 토탈월급을 막대 그래프로 그리시오.
 1. 스칼라에서는 부서번호, 부서번호별 토탈월급을 csv 파일로 뽑고
scala> sql("""select deptno, sum(sal)
                    from emp
                    group by deptno""").coalesce(1).write.option("header","true").option("sep",",").mode("overwrite").csv("/home/scott/dd")
 
$ cd dd
$ ls
part-r-00000-c306a6c8-a8cf-4fca-9e83-26dc2b6ce057.csv  _SUCCESS
 
$ cat part-r-00000-c306a6c8-a8cf-4fca-9e83-26dc2b6ce057.csv
deptno,sum(sal)
20,10875
10,8750
30,9400
 
$ mv part-r-00000-c306a6c8-a8cf-4fca-9e83-26dc2b6ce057.csv deptno.csv
$ ls
deptno.csv  _SUCCESS
$ cat deptno.csv
deptno,sum(sal)
20,10875
10,8750
30,9400
 
 
 2. 그 csv 파일을 윈도우의 파이썬에서 막대 그래프로 시각화 하세요 ~
import pandas as pd
 
emp = pd.read_csv("c:\\data\\deptno.csv")
result = emp['sum(sal)']
result.index=emp['deptno']
result.plot(kind='bar', color='orange')
